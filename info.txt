First see if you can handle a 32 hour side project.

[X] 32 hours can be done




[X] Secure Messaging Platform built

The goal is to make a secure messaging client.
I need to make a front-end, and a back-end.
The idea is to make a client-server architecture app.
Two apps, one server, and one client.

//////////////////////////////////
Technology:
//////////////////////////////////

Python
Tkinter
Json builtin Python
Socket builtin Python
ChatGPT
Some encryption (Cryptography, python)

///////////////////////////////////////
Architecture
///////////////////////////////////////

Client                  Server
FrontEnd BackEnd        FrontEnd BackEnd




*** The following documents are in Drawer #1***

/////////////////////////////////////////////////
Server Frontend Requirements:
////////////////////////////////////////////////
 - Wireframes drawn

///////////////////////////////////////////////
Server Design:
 - Diagram drawn
/////////////////////////////////////////////

/////////////////////////////////////////////
Client Fronted Requirements
/////////////////////////////////////////////

 - Wireframes drawn

//////////////////////////////////////////////
Client Design:
/////////////////////////////////////////////
 - Same as Server diagram

/////////////////////////////////////////////////
Communication Requirements:
////////////////////////////////////////////////
 1 server
 multiple clients
 clients have name and message
 server updates clients with messages
 Json format


Alpha:
Server:
[X] Research how to build a frontend in Tkinter 3h
[X] Build a frontend 2h
[X] Research how to build a communicator in the socket api 2h
[X] Design a communicator 1h

Est. letover time 24 h.

[X] Build a communicator 2h

Est.leftover time 22 h.

[X] Research of the cryptography module 2h
[X] Design an encryptor 2h
[X] Build an encryptor 2h

Est.leftover time 11h 30m.

[X] Design controller 2h
[X] Redesign 2h
[X] Build controller 2h
[X] Design status messages 1h
[X] Implement status messages 1h
[X] Add name input 30m


Client:
[X] Build a frontend 2h
[X] Design the communicator 1h
[X] Build the communicator 2h
[X] Check if the encryptor fits 1h
[X] Build the Controller 2h

Est. time left 2h


[X] Test and troubleshoot 5h

[X] Add kill process flag to clientconnection. 
Implement it in serverconnector status_received.
Like I want to terminate the processes on deletion.
[X]Add exception handling to controller send

Total est. 32 hours.
A whole working week.

End of Alpha.


[ ] Make a github repository for this
[ ] Add a readme.txt, design it (There is a screenshot in the project folder)
[ ] Push it to the remote as public

Possible next steps
- Maybe design a user friendly tutorial
